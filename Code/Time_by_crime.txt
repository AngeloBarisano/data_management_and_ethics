
-- First create a View that breaks each crime date into year, month, day, season, time of day(eg morning 6-12, noon 12-18,  evening 18-24, night  24-6)
SELECT CrimeID, STRFTIME("%d", Date_Time) AS day, STRFTIME("%m", Date_Time) AS month, STRFTIME("%Y", Date_Time) AS year, STRFTIME("%H", Date_Time) AS hour
FROM CriminalCase;


-- now create a query that says that if in the morning then morning 
CREATE VIEW view_convenient_time AS
SELECT CrimeID, IUCR, year AS Year, month AS Month, day AS Day, hour as Hour,
CASE WHEN CAST(hour AS INT) >= 6 and CAST(hour AS INT) <= 11  then 'Morning'
			WHEN CAST(hour AS INT) >= 12 and CAST(hour AS INT) <= 17  then 'Noon'
			WHEN CAST(hour AS INT) >= 18 and CAST(hour AS INT) <= 23  then 'Evening'
			WHEN CAST(hour AS INT) >= 0 and CAST(hour AS INT) <= 5  then 'Night'
		   end TimeofDay
FROM
(SELECT CrimeID, IUCR, STRFTIME("%d", Date_Time) AS day, STRFTIME("%m", Date_Time) AS month, STRFTIME("%Y", Date_Time) AS year, STRFTIME("%H", Date_Time) AS hour
FROM CriminalCase);



-- i) TOTAL CRIME DISTRIBUTION BY YEAR

SELECT Year, COUNT(*) AS "TotalCrimeCommitted"
FROM view_convenient_time
GROUP BY Year;
-- Observation: overall positive trend (so reduced crime overall)

--ii) group by Month
SELECT Month, COUNT(*) AS "TotalCrimeCommitted"
FROM view_convenient_time
GROUP BY Month;


--iii) group by year and month
SELECT Year, Month, COUNT(*) AS "TotalCrimeCommitted"
FROM view_convenient_time
GROUP BY Year, Month;
-- do the same in a window function: Partition 




-- iiii) look at arrest intensive crimes by time of day(so high proportion of arrests)
-- I AM AWARE THAT THIS IS NOT EFFICIENT; BUT I WANT TO DEMONSTRATE THE ENTIRE LOGIC OF CRAWLING THORUGH A DATABASE (and views^^)
SELECT TimeofDay, COUNT(*) FROM
view_convenient_time AS vct 
JOIN CriminalCase as cc ON vct.CrimeID == cc.CrimeID 
JOIN CrimeType AS ct ON cc.IUCR == ct.IUCR
JOIN view_resource_crimes AS vrc ON ct.PrimaryCategory == vrc.PrimaryCategory
WHERE vrc.ProportionArrested > 50
GROUP BY TimeofDay;

---iiiii) now also look whether the trend for high arrest crime is also true
SELECT Year, COUNT(*) AS FROM
view_convenient_time AS vct 
JOIN CriminalCase as cc ON vct.CrimeID == cc.CrimeID 
JOIN CrimeType AS ct ON cc.IUCR == ct.IUCR
JOIN view_resource_crimes AS vrc ON ct.PrimaryCategory == vrc.PrimaryCategory
WHERE vrc.ProportionArrested > 50
GROUP BY Year;



-- iiiiiii) CREATE A WINDOW FUNCTION THAT CALCULATES LAG PREVIOUS YEAR 
-- first create a simple ranking of the most resource intenstive crimes
SELECT PrimaryCategory, DENSE_RANK() OVER( ORDER BY ProportionArrested  DESC) AS PrimRank, ProportionArrested
FROM view_resource_crimes;



-- create a rank by year
SELECT PrimaryCategory, DENSE_RANK() OVER( ORDER BY ProportionArrested  DESC) AS PrimRank, ProportionArrested
FROM view_resource_crimes;

-- step 1
SELECT year, COUNT(* ) AS CrimesCommitted, LAG(CrimesCommitted) OVER ( ORDER BY CrimesCommitted ) AS PrevYear
       --revenue - LAG(revenue) OVER ( ORDER BY year ) AS YOY_Difference
FROM   view_convenient_time
GROUP BY Year;

-- step 2
SELECT Year, CrimesCommitted , LAG(CrimesCommitted) OVER (ORDER BY Year) AS PrevYearCrimes, CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year) AS PrevYearCrimesDIFF
FROM   
(SELECT Year, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time
GROUP BY Year);

-- step 3
SELECT Year, Month, CrimesCommitted , 
	ROUND(((CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year))/ CAST(LAG(CrimesCommitted) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS PrevYearCrimesCng
FROM   
(SELECT Year, Month, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time
GROUP BY Year, Month);


-- step 4 provide a version of the previous query on a yearly basis based on each primary category split into each category
SELECT Year, CrimesCommitted , 
	ROUND(((CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year))/ CAST(LAG(CrimesCommitted) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS PrevYearCrimesCng
FROM   
(SELECT Year, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time
GROUP BY Year);


-- now get the same per crime
SELECT Year, CrimesCommitted , 
	ROUND(((CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year))/ CAST(LAG(CrimesCommitted) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS PrevYearCrimesCng
FROM   
(SELECT Year, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time
GROUP BY Year);


SELECT vct.IUCR, vct.Year, vct.Month, vct.Day, vct.Hour, ct.PrimaryCategory
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR;

SELECT vct.IUCR, vct.Year, vct.Month, vct.Day, vct.Hour, ct.PrimaryCategory, COUNT(*) CrimeCommittedByPrimaryCategory
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
GROUP BY vct.Year, ct.PrimaryCategory;


SELECT Year, PrimaryCategory, CrimeCommittedByPrimaryCategory , 
	ROUND(((CrimeCommittedByPrimaryCategory - LAG(CrimeCommittedByPrimaryCategory) OVER (ORDER BY Year))/ CAST(LAG(CrimeCommittedByPrimaryCategory) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS Change
FROM   
(SELECT vct.IUCR, vct.Year, vct.Month, vct.Day, vct.Hour, ct.PrimaryCategory, COUNT(*) CrimeCommittedByPrimaryCategory
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
GROUP BY vct.Year, ct.PrimaryCategory)
ORDER BY PrimaryCategory;



-- this is better done in a window function: essentially the window function has to 1) group by Primary category, Year and then 2) calculate per PRIMARY
-- Category calculate the change to the previous year but only for that category
SELECT vct.IUCR, vct.Year, vct.Month, vct.Day, vct.Hour, ct.PrimaryCategory
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
GROUP BY ;



SELECT DISTINCT Year, PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountYear
FROM
(SELECT vct.IUCR, vct.Year, vct.Month, vct.Day, vct.Hour, ct.PrimaryCategory
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR) AS baseq;



SELECT DISTINCT Year, PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountYear 
FROM
(SELECT vct.IUCR, vct.Year, vct.Month, vct.Day, vct.Hour, ct.PrimaryCategory
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR) AS baseq;



SELECT Year, PrimaryCategory, CrimeCountCurrentYear, LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS CrimeCountPrevYear
FROM
(SELECT DISTINCT Year, PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM
(SELECT vct.IUCR, vct.Year, vct.Month, vct.Day, vct.Hour, ct.PrimaryCategory
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR)) AS baseq;

-- now divide by stuff
SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4) AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR);



-- relevant output
/* IMPORTNAT OUTPUT BELOW*/
SELECT Year, PrimaryCategory, CrimeCountCurrentYear, LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS CrimeCountPrevYear, CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS diff,
ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4) AS PCTChange
FROM
(SELECT DISTINCT Year, PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM
(SELECT vct.IUCR, vct.Year, vct.Month, vct.Day, vct.Hour, ct.PrimaryCategory
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR)) AS baseq;

/* SHORTER VERSION */
SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4) AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR);

/* add resource intensive crimes to it */
SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4) AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY ct.PrimaryCategory, Year ORDER BY ct.PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_resource_crimes vrc JOIN CrimeType AS ct ON vrc.PrimaryCategory == ct.PrimaryCategory JOIN view_convenient_time as vct ON vct.IUCR == ct.IUCR 
WHERE vrc.ProportionArrested > 50 AND vrc.TotalCommitted >= 500);




-- calculate the category with the total largest percentage drop over all 5 years by ranking the crime!
SELECT  DISTINCT PrimaryCategory,PCTChange, Dense_RANK () OVER(ORDER BY PCTChange ASC)
FROM
(SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4)
 AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
WHERE Year == '2017' OR Year == '2021'))
WHERE PCTChange NOT NULL;



-- calculate the category with the total largest percentage drop over all 5 years by ranking the crime!
-- biggest 5 INCREAASES 
SELECT  DISTINCT PrimaryCategory,PCTChange, Dense_RANK () OVER(ORDER BY PCTChange DESC) AS CrimeWithLargestReduction
FROM
(SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4)
 AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
WHERE Year == '2017' OR Year == '2021'))
WHERE PCTChange NOT NULL
LIMIT 5;




































-- q1_part 1 & 2
-- simple way to get total per year from same query 2017
SELECT Year, CrimesCommitted , 
	ROUND(((CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year))/ CAST(LAG(CrimesCommitted) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS PctChangetoPrevYear
FROM   
(SELECT Year, Month, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time
GROUP BY Year)
WHERE  Year =='2017';

-- simple way to get total per year from same query 2021
SELECT Year, CrimesCommitted , 
	ROUND(((CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year))/ CAST(LAG(CrimesCommitted) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS PctChangetoPrevYear
FROM   
(SELECT Year, Month, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time
GROUP BY Year)
WHERE Year == '2021';

- -- simple way to get total per year from same query; total change
SELECT Year, CrimesCommitted , 
	ROUND(((CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year))/ CAST(LAG(CrimesCommitted) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS PctChangetoPrevYear
FROM   
(SELECT Year, Month, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time

-- q1 part 3
-- get overall
SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4) AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY ct.PrimaryCategory, Year ORDER BY ct.PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_resource_crimes vrc JOIN CrimeType AS ct ON vrc.PrimaryCategory == ct.PrimaryCategory JOIN view_convenient_time as vct ON vct.IUCR == ct.IUCR 
WHERE vrc.ProportionArrested > 50 AND vrc.TotalCommitted >= 500);

-- justlookign at total changes
SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4) AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY ct.PrimaryCategory, Year ORDER BY ct.PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_resource_crimes vrc JOIN CrimeType AS ct ON vrc.PrimaryCategory == ct.PrimaryCategory JOIN view_convenient_time as vct ON vct.IUCR == ct.IUCR 
WHERE vrc.ProportionArrested > 50 AND vrc.TotalCommitted >= 500)
WHERE Year == '2017' OR Year == '2021';

-- now group all in this category together pct change
SELECT Year, SUM(CrimeCountCurrentYear), ROUND((SUM(CrimeCountCurrentYear) - CAST(LAG(SUM(CrimeCountCurrentYear)) OVER (ORDER BY Year) AS REAL)) / CAST(LAG(SUM(CrimeCountCurrentYear)) OVER (ORDER BY Year) AS REAL), 4) * 100 AS PCTChange
 FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY ct.PrimaryCategory, Year ORDER BY ct.PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_resource_crimes vrc JOIN CrimeType AS ct ON vrc.PrimaryCategory == ct.PrimaryCategory JOIN view_convenient_time as vct ON vct.IUCR == ct.IUCR 
WHERE vrc.ProportionArrested > 50 AND vrc.TotalCommitted >= 500)
WHERE Year == '2017' OR Year == '2021'
GROUP BY Year;

-- q1 part 3
-- biggest 5 INCREAASES 
SELECT  DISTINCT PrimaryCategory,PCTChange, Dense_RANK () OVER(ORDER BY PCTChange DESC) AS CrimeWithLargestReduction
FROM
(SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4)
 AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
WHERE Year == '2017' OR Year == '2021'))
WHERE PCTChange NOT NULL
LIMIT 5;

-- biggest 5 decrease 
SELECT  DISTINCT PrimaryCategory,PCTChange, Dense_RANK () OVER(ORDER BY PCTChange ASC) AS CrimeWithLargestReduction
FROM
(SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4)
 AS PCTChange
FROM
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
WHERE Year == '2017' OR Year == '2021'))
WHERE PCTChange NOT NULL
LIMIT 5;
